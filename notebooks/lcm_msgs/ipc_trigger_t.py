"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ipc_trigger_t(object):
    __slots__ = ["timestamp"]

    __typenames__ = ["int64_t"]

    __dimensions__ = [None]

    def __init__(self):
        self.timestamp = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ipc_trigger_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ipc_trigger_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ipc_trigger_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ipc_trigger_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ipc_trigger_t in parents: return 0
        tmphash = (0xbb81bb0c285f3db4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ipc_trigger_t._packed_fingerprint is None:
            ipc_trigger_t._packed_fingerprint = struct.pack(">Q", ipc_trigger_t._get_hash_recursive([]))
        return ipc_trigger_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

